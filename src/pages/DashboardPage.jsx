import React, { useEffect, useState } from "react";
import CategoryCard from "../components/CategoryCard";
import RecordModal from "../components/RecordModal";
import FloatingButton from "../components/FloatingButton";

export default function DashboardPage() {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [transactionHistory, setTransactionHistory] = useState([]);
  const [showRecordModal, setShowRecordModal] = useState(false);
  const [selectedCategoryId, setSelectedCategoryId] = useState("");

  // NEW: State cho hi·ªÉn th·ªã ph√¢n trang giao d·ªãch
  const [visibleCount, setVisibleCount] = useState(5);
  const initialVisibleCount = 5;
  const incrementCount = 10;

  // Fetch danh m·ª•c
  useEffect(() => {
    const fetchCats = async () => {
      try {
        const res = await fetch("http://localhost:3000/api/admin/categories");
        if (!res.ok) throw new Error(`Status ${res.status}`);
        const data = await res.json();
        setCategories(data);
      } catch (err) {
        console.error("‚ùå L·ªói l·∫•y categories:", err);
        setError("Kh√¥ng load ƒë∆∞·ª£c danh m·ª•c");
      } finally {
        setLoading(false);
      }
    };
    fetchCats();
  }, []);

  // Khi click v√†o danh m·ª•c
  const handleCategoryClick = (cat) => {
    setSelectedCategoryId(cat._id);
    setShowRecordModal(true);
  };

  const fetchTransactionHistory = async () => {
    console.log("PAGE: fetchTransactionHistory ƒê∆Ø·ª¢C G·ªåI");
    try {
      const user = JSON.parse(localStorage.getItem("user"));
      if (!user?._id) return;
      const res = await fetch(
        `http://localhost:3000/api/transactions/user/${user._id}`
      );
      if (!res.ok) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c l·ªãch s·ª≠ giao d·ªãch");
      const data = await res.json();
      setTransactionHistory(data);
    } catch (err) {
      // Optional: hi·ªÉn th·ªã l·ªói
    }
  };

  useEffect(() => {
    fetchTransactionHistory();
  }, []);

  return (
    <div className="min-h-screen bg-white relative">
      <div className="px-4 mt-4">
        {/* Danh m·ª•c chi ti√™u */}
        {loading && <p className="text-center text-sm">ƒêang t·∫£i...</p>}
        {error && <p className="text-center text-red-500 text-sm">{error}</p>}

        <div className="flex gap-4 overflow-x-auto pb-2">
          {categories.map((cat) => (
            <CategoryCard
              key={cat._id}
              icon={cat.icon || "üìÅ"}
              label={cat.name}
              onClick={() => handleCategoryClick(cat)}
            />
          ))}
        </div>

        {/* L·ªãch s·ª≠ giao d·ªãch */}
        {transactionHistory.length === 0 ? (
          <div className="text-center text-sm text-gray-500 mt-10">
            <p>B·∫°n ch∆∞a c√≥ ghi ch√©p n√†o!</p>
            <p className="text-blue-500">
              H√£y ch·∫°m v√†o ƒë√¢y v√† k√©o xu·ªëng ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi nh·∫•t!
            </p>
          </div>
        ) : (
          <div className="mt-8">
            <h2 className="text-lg font-bold mb-4 text-gray-800">
              Giao d·ªãch g·∫ßn ƒë√¢y
            </h2>
            <div className="space-y-3">
              {transactionHistory.slice(0, visibleCount).map((tx) => {
                // X√°c ƒë·ªãnh lo·∫°i giao d·ªãch ƒë·ªÉ t√πy ch·ªânh hi·ªÉn th·ªã
                const isIncome = tx.transaction_type === "income";
                const isExpense = tx.transaction_type === "expense";
                const isContribution = tx.transaction_type === "contribution";

                let iconBgClass = "bg-gray-400";
                let iconSign = "";
                let amountColorClass = "text-gray-700";
                let amountPrefix = "";
                const displayAmount = tx.amount;

                if (isIncome) {
                  iconBgClass = "bg-green-500";
                  iconSign = "+";
                  amountColorClass = "text-green-600";
                  amountPrefix = "+ ";
                } else if (isExpense) {
                  iconBgClass = "bg-red-500";
                  iconSign = "-";
                  amountColorClass = "text-red-600";
                  amountPrefix = "- ";
                } else if (isContribution) {
                  // Contribution l√† ti·ªÅn ƒëi ra kh·ªèi t√†i kho·∫£n c√° nh√¢n
                  iconBgClass = "bg-red-500"; // Hi·ªÉn th·ªã nh∆∞ m·ªôt kho·∫£n chi
                  iconSign = "-";
                  amountColorClass = "text-red-600";
                  amountPrefix = "- ";
                } else {
                  if (tx.amount >= 0) {
                    // M·∫∑c ƒë·ªãnh coi s·ªë d∆∞∆°ng l√† thu
                    iconBgClass = "bg-green-500";
                    iconSign = "+";
                    amountColorClass = "text-green-600";
                    amountPrefix = "+ ";
                  } else {
                    // M·∫∑c ƒë·ªãnh s·ªë √¢m l√† chi (√≠t kh·∫£ nƒÉng x·∫£y ra n·∫øu amount lu√¥n d∆∞∆°ng t·ª´ API)
                    iconBgClass = "bg-red-500";
                    iconSign = "-";
                    amountColorClass = "text-red-600";
                    amountPrefix = "- ";
                    // displayAmount = Math.abs(tx.amount); // N·∫øu amount c√≥ th·ªÉ √¢m t·ª´ API
                  }
                }

                return (
                  <div
                    key={tx._id}
                    className="flex items-start gap-3 p-4 rounded-xl shadow-sm bg-white border border-gray-100"
                  >
                    <div
                      className={`w-10 h-10 flex items-center justify-center rounded-full text-xl font-bold text-white ${iconBgClass}`}
                    >
                      {iconSign}
                    </div>
                    <div className="flex-1">
                      <div className="flex justify-between items-center">
                        <span className="font-semibold text-gray-800 capitalize">
                          {tx.description || tx.transaction_type}
                        </span>
                        <span className={`font-semibold ${amountColorClass}`}>
                          {amountPrefix}
                          {displayAmount.toLocaleString()} ƒë
                        </span>
                      </div>
                      <div className="text-sm text-gray-500 mt-1">
                        {/* ... th√¥ng tin ng√†y, ghi ch√∫, tr·∫°ng th√°i ... */}
                        Ng√†y:{" "}
                        {tx.transaction_date
                          ? new Date(tx.transaction_date).toLocaleDateString(
                              "vi-VN"
                            )
                          : ""}
                        {tx.description &&
                          tx.description !== tx.transaction_type && (
                            <>
                              {" | "}Ghi ch√∫:{" "}
                              <span className="italic">{tx.description}</span>
                            </>
                          )}
                        {tx.status && (
                          <>
                            {" | "}Tr·∫°ng th√°i: {tx.status}
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}

              {/* N√∫t "Xem th√™m" v√† "Thu g·ªçn" */}
              {visibleCount < transactionHistory.length && (
                <div className="text-center mt-4">
                  {" "}
                  {/* Th√™m margin-top cho n√∫t */}
                  <button
                    onClick={() =>
                      setVisibleCount((prev) => prev + incrementCount)
                    } // THAY ƒê·ªîI: TƒÉng th√™m incrementCount
                    className="text-blue-600 hover:underline text-sm font-medium"
                  >
                    Xem th√™m ({incrementCount} m·ª•c)
                  </button>
                </div>
              )}

              {/* Ch·ªâ hi·ªÉn th·ªã "Thu g·ªçn" n·∫øu s·ªë l∆∞·ª£ng ƒëang hi·ªÉn th·ªã > s·ªë l∆∞·ª£ng ban ƒë·∫ßu */}
              {visibleCount > initialVisibleCount &&
                transactionHistory.length > initialVisibleCount && (
                  <div className="text-center mt-2">
                    {" "}
                    {/* Th√™m margin-top cho n√∫t */}
                    <button
                      onClick={() => setVisibleCount(initialVisibleCount)} // THAY ƒê·ªîI: Quay v·ªÅ initialVisibleCount
                      className="text-gray-500 hover:underline text-sm font-medium"
                    >
                      Thu g·ªçn
                    </button>
                  </div>
                )}
            </div>
          </div>
        )}
      </div>

      {/* N√∫t th√™m ghi ch√©p */}
      <FloatingButton onSuccess={fetchTransactionHistory} />

      {/* RecordModal */}
      {showRecordModal && (
        <RecordModal
          onClose={() => setShowRecordModal(false)}
          selectedCategoryId={selectedCategoryId}
        />
      )}
    </div>
  );
}
