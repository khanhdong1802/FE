import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { ChevronLeft, ChevronRight, Download, Search } from "lucide-react";
import { format, subDays, addDays, isSameDay } from "date-fns";
import vi from "date-fns/locale/vi";
import BalanceLineChart from "../components/BalanceLineChart";

function TransactionHistoryHeader({
  onTabChange,
  onTypeFilterChange,
  currentTab,
  currentType,
}) {
  return (
    <div className="flex flex-col gap-2 bg-white px-4 py-2 border-b">
      <div className="flex gap-2">
        {["T·∫•t c·∫£", "C√° nh√¢n", "Nh√≥m"].map((tab) => (
          <button
            key={tab}
            className={`px-3 py-1 rounded-full font-medium ${
              currentTab === tab
                ? "bg-purple-200 text-purple-700"
                : "bg-gray-100 text-gray-600"
            }`}
            onClick={() => onTabChange(tab)}
          >
            {tab}
          </button>
        ))}
      </div>
      <div className="flex gap-2">
        {["T·∫•t c·∫£", "N·∫°p", "R√∫t", "Chi ti√™u", "ƒê√≥ng g√≥p"].map((type) => (
          <button
            key={type}
            className={`px-2 py-1 rounded text-xs ${
              currentType === type
                ? "bg-blue-200 text-blue-700"
                : "bg-gray-100 text-gray-600"
            }`}
            onClick={() => onTypeFilterChange(type)}
          >
            {type}
          </button>
        ))}
      </div>
    </div>
  );
}

function TransactionItem({ tx }) {
  let bg = "bg-gray-100", // M√†u n·ªÅn m·∫∑c ƒë·ªãnh
    text = "text-gray-800", // M√†u ch·ªØ m·∫∑c ƒë·ªãnh
    label = tx.transaction_type; // L·∫•y label m·∫∑c ƒë·ªãnh t·ª´ type

  // ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn v√† th√™m d·∫•u +/-
  let amountDisplay = "";
  if (typeof tx.amount === "number") {
    if (
      tx.transaction_type === "income" ||
      (tx.transaction_type === "contribution" &&
        !tx.group_id) /* Contribution v√†o qu·ªπ c√° nh√¢n (n·∫øu c√≥) */
    ) {
      amountDisplay = `+${tx.amount.toLocaleString()} ƒë`;
    } else if (
      tx.transaction_type === "withdraw" ||
      tx.transaction_type === "expense" ||
      tx.transaction_type === "groupExpense" ||
      (tx.transaction_type === "contribution" &&
        tx.group_id) /* Contribution v√†o qu·ªπ nh√≥m t·ª´ c√° nh√¢n */
    ) {
      amountDisplay = `-${tx.amount.toLocaleString()} ƒë`;
    } else {
      // Tr∆∞·ªùng h·ª£p amount c√≥ th·ªÉ √¢m ho·∫∑c d∆∞∆°ng kh√¥ng r√µ r√†ng t·ª´ type
      amountDisplay = `${
        tx.amount > 0 ? "+" : ""
      }${tx.amount.toLocaleString()} ƒë`;
    }
  }

  // X√°c ƒë·ªãnh m√†u s·∫Øc v√† label c·ª• th·ªÉ d·ª±a tr√™n transaction_type
  if (tx.transaction_type === "income") {
    bg = "bg-green-100"; // S·ª≠ d·ª•ng m√†u nh·∫°t h∆°n cho n·ªÅn
    text = "text-green-700";
    label = tx.description || "Thu nh·∫≠p"; // ∆Øu ti√™n description
  } else if (
    tx.transaction_type === "expense" ||
    tx.transaction_type === "withdraw"
  ) {
    // G·ªôp "expense" v√† "withdraw" n·∫øu hi·ªÉn th·ªã gi·ªëng nhau
    bg = "bg-red-100"; // N·ªÅn ƒë·ªè nh·∫°t
    text = "text-red-700"; // Ch·ªØ ƒë·ªè ƒë·∫≠m h∆°n
    label = tx.description || "Chi ti√™u c√° nh√¢n";
  } else if (tx.transaction_type === "contribution") {
    // N·∫øu contribution n√†y l√† ti·ªÅn N·∫†P V√ÄO NH√ìM (t·ª´ c√° nh√¢n), n√≥ l√† m·ªôt kho·∫£n chi t·ª´ view c√° nh√¢n
    // Nh∆∞ng n·∫øu ƒë√¢y l√† trang l·ªãch s·ª≠ T·∫§T C·∫¢, v√† b·∫°n mu·ªën ph√¢n bi·ªát n√≥ th√¨ c·∫ßn logic r√µ h∆°n
    // Gi·∫£ s·ª≠ "contribution" trong TransactionHistory l√† ti·ªÅn c√° nh√¢n n·∫°p v√†o nh√≥m
    bg = "bg-orange-100"; // V√≠ d·ª• m√†u cam cho n·∫°p ti·ªÅn v√†o nh√≥m (chi t·ª´ c√° nh√¢n)
    text = "text-orange-700";
    label = tx.description || "ƒê√≥ng g√≥p nh√≥m";
  } else if (tx.transaction_type === "groupExpense") {
    // Chi ti√™u TR·ª∞C TI·∫æP T·ª™ QU·ª∏ NH√ìM (kh√¥ng ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn s·ªë d∆∞ c√° nh√¢n ƒëang xem ·ªü ƒë√¢y)
    // N·∫øu ƒëang xem tab "T·∫•t c·∫£" ho·∫∑c "Nh√≥m" th√¨ m·ªõi th·∫•y r√µ vai tr√≤
    bg = "bg-sky-100"; // V√≠ d·ª• m√†u xanh da tr·ªùi cho chi ti√™u c·ªßa nh√≥m
    text = "text-sky-700";
    label = tx.description || "Chi ti√™u nh√≥m";
  } else {
    // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh ho·∫∑c d·ª±a v√†o amount n·∫øu c·∫ßn
    // V√≠ d·ª•: n·∫øu amount √¢m m√† type kh√¥ng r√µ, c√≥ th·ªÉ cho m√†u ƒë·ªè
    if (tx.amount < 0 && !tx.transaction_type) {
      // Gi·∫£ s·ª≠ API c√≥ th·ªÉ tr·∫£ amount √¢m
      bg = "bg-red-100";
      text = "text-red-700";
      label = tx.description || "Kho·∫£n chi kh√¥ng r√µ";
      amountDisplay = `${tx.amount.toLocaleString()} ƒë`; // amount ƒë√£ √¢m
    } else {
      label = tx.description || tx.transaction_type || "Giao d·ªãch kh√°c";
    }
  }

  return (
    <div className={`mb-3 p-3 rounded-lg shadow-sm ${bg}`}>
      {" "}
      {/* Gi·∫£m padding n·∫øu c·∫ßn */}
      <div className="flex items-start">
        {" "}
        {/* B·ªè gap-2 n·∫øu kh√¥ng c·∫ßn */}
        {/* Ch·∫•m tr√≤n gi·ªù v√† th·ªùi gian */}
        <div className="flex flex-col items-center w-16 text-center mr-2">
          {" "}
          {/* Cho chi·ªÅu r·ªông c·ªë ƒë·ªãnh */}
          <span
            className={`w-2.5 h-2.5 rounded-full block mt-1.5 ${
              // L·∫•y m√†u ƒë·∫≠m h∆°n cho ch·∫•m tr√≤n, b·ªè /80
              bg.includes("100")
                ? bg.replace("100", "500")
                : bg.replace("/80", "")
            }`}
          ></span>
          <span className="text-xs text-gray-500 mt-1 whitespace-nowrap">
            {" "}
            {/* Ch·ªëng xu·ªëng d√≤ng */}
            {tx.transaction_date
              ? new Date(tx.transaction_date).toLocaleTimeString("vi-VN", {
                  hour: "2-digit",
                  minute: "2-digit",
                })
              : ""}
          </span>
        </div>
        {/* N·ªôi dung ch√≠nh c·ªßa giao d·ªãch */}
        <div className="flex-1 min-w-0">
          {" "}
          {/* Th√™m min-w-0 ƒë·ªÉ x·ª≠ l√Ω overflow text */}
          <div className={`font-semibold ${text} truncate`}>
            {" "}
            {/* Th√™m truncate n·∫øu t√™n d√†i */}
            {tx.user_id?.name || "B·∫°n"} - {label}
          </div>
          <div className={`font-bold ${text} text-lg`}>
            {" "}
            {/* TƒÉng c·ª° ch·ªØ s·ªë ti·ªÅn */}
            {amountDisplay}
          </div>
          {/* Th√¥ng tin th√™m (Category, Group) n·∫øu c√≥ */}
          <div className="text-xs text-gray-500 flex flex-wrap gap-x-2 gap-y-0.5 mt-1">
            {tx.category_name && (
              <span className="bg-gray-200 px-1.5 py-0.5 rounded-full">
                üìÅ {tx.category_name}
              </span>
            )}
            {tx.group_name && (
              <span className="bg-gray-200 px-1.5 py-0.5 rounded-full">
                üè† {tx.group_name}
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function TransactionList({ transactions, loading }) {
  if (loading)
    return <div className="text-center py-10 text-gray-500">ƒêang t·∫£i...</div>;
  if (!transactions.length)
    return (
      <div className="text-center text-gray-400">Kh√¥ng c√≥ giao d·ªãch n√†o.</div>
    );

  return (
    <div className="px-3 py-4">
      {transactions.map((tx) => (
        <TransactionItem key={tx._id} tx={tx} />
      ))}
    </div>
  );
}

export default function TransactionHistoryPage() {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [userId, setUserId] = useState("");
  const [tab, setTab] = useState("T·∫•t c·∫£");
  const [typeFilter, setTypeFilter] = useState("T·∫•t c·∫£");
  const navigate = useNavigate();

  //D·ªÆ LI·ªÜU BI·ªÇU ƒê·ªí
  const [balanceChartData, setBalanceChartData] = useState(null);

  // L·∫•y userId t·ª´ localStorage
  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("user"));
    if (user?._id) setUserId(user._id);
  }, []);

  // Fetch giao d·ªãch theo ng√†y
  useEffect(() => {
    if (!userId) return;
    setLoading(true);
    const dateStr = format(selectedDate, "yyyy-MM-dd");
    fetch(
      `http://localhost:3000/api/transactions/user/${userId}?date=${dateStr}`
    )
      .then((res) => res.json())
      .then((data) => {
        setTransactions(data);
        setLoading(false);
      });
  }, [selectedDate, userId]);

  // T·∫°o m·∫£ng 14 ng√†y xung quanh selectedDate
  const days = [];
  for (let i = -6; i <= 7; i++) {
    days.push(addDays(selectedDate, i));
  }

  // Xu·∫•t CSV (gi·∫£ l·∫≠p)
  const handleExportCSV = () => {
    alert("T√≠nh nƒÉng xu·∫•t CSV ƒëang ph√°t tri·ªÉn!");
  };

  // L·ªçc giao d·ªãch theo tab v√† lo·∫°i
  const filteredTransactions = transactions.filter((tx) => {
    // L·ªçc theo tab
    if (tab === "C√° nh√¢n" && tx.group_id) return false;
    if (tab === "Nh√≥m" && !tx.group_id) return false;
    // L·ªçc theo lo·∫°i
    if (
      typeFilter !== "T·∫•t c·∫£" &&
      tx.transaction_type !== typeFilter.toLowerCase()
    )
      return false;
    return true;
  });

  useEffect(() => {
    // Ch·ªâ t·∫°o d·ªØ li·ªáu bi·ªÉu ƒë·ªì cho tab "C√° nh√¢n" v√† khi c√≥ giao d·ªãch
    if (tab === "C√° nh√¢n" && filteredTransactions.length > 0) {
      // S·∫Øp x·∫øp giao d·ªãch theo th·ªùi gian tƒÉng d·∫ßn
      const sortedTx = [...filteredTransactions].sort(
        (a, b) => new Date(a.transaction_date) - new Date(b.transaction_date)
      );

      let currentBalance = 0; // B·∫Øt ƒë·∫ßu s·ªë d∆∞ t·ª´ 0 cho ng√†y n√†y (ho·∫∑c b·∫°n c√≥ th·ªÉ fetch s·ªë d∆∞ ƒë·∫ßu ng√†y n·∫øu c√≥ API)
      const labels = ["ƒê·∫ßu ng√†y"]; // ƒêi·ªÉm b·∫Øt ƒë·∫ßu
      const dataPoints = [0]; // S·ªë d∆∞ t·∫°i ƒëi·ªÉm b·∫Øt ƒë·∫ßu

      sortedTx.forEach((tx) => {
        let amountChange = 0;
        // Logic x√°c ƒë·ªãnh thay ƒë·ªïi s·ªë d∆∞ c√° nh√¢n (t∆∞∆°ng t·ª± DashboardPage)
        if (tx.transaction_type === "income") {
          amountChange = tx.amount;
        } else if (
          tx.transaction_type === "expense" ||
          tx.transaction_type === "withdraw"
        ) {
          amountChange = -tx.amount; // Giao d·ªãch chi ti√™u l√†m gi·∫£m s·ªë d∆∞
        } else if (tx.transaction_type === "contribution" && tx.group_id) {
          // ƒê√≥ng g√≥p v√†o nh√≥m c≈©ng l√† chi t·ª´ t√†i kho·∫£n c√° nh√¢n
          amountChange = -tx.amount;
        }
        // B·ªè qua c√°c lo·∫°i kh√¥ng ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn s·ªë d∆∞ c√° nh√¢n nh∆∞ groupExpense t·ª´ qu·ªπ nh√≥m

        if (amountChange !== 0) {
          // Ch·ªâ th√™m ƒëi·ªÉm n·∫øu c√≥ thay ƒë·ªïi s·ªë d∆∞ th·ª±c s·ª±
          currentBalance += amountChange;
          labels.push(
            new Date(tx.transaction_date).toLocaleTimeString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })
          );
          dataPoints.push(currentBalance);
        }
      });

      setBalanceChartData({
        labels: labels,
        datasets: [
          {
            label: `Bi·∫øn ƒë·ªông s·ªë d∆∞ ng√†y ${format(selectedDate, "dd/MM/yyyy")}`,
            data: dataPoints,
            fill: true, // Cho ph√©p t√¥ m√†u v√πng d∆∞·ªõi ƒë∆∞·ªùng line
            borderColor: "rgb(167, 139, 250)", // M√†u t√≠m nh·∫°t cho ƒë∆∞·ªùng line
            backgroundColor: (context) => {
              // H√†m t·∫°o gradient
              const ctx = context.chart.ctx;
              if (!ctx) return null;
              const gradient = ctx.createLinearGradient(
                0,
                0,
                0,
                context.chart.height * 0.8
              ); // Chi·ªÅu cao gradient
              gradient.addColorStop(0, "rgba(167, 139, 250, 0.5)"); // M√†u t√≠m nh·∫°t ·ªü tr√™n
              gradient.addColorStop(1, "rgba(167, 139, 250, 0.05)"); // Trong su·ªët d·∫ßn v·ªÅ d∆∞·ªõi
              return gradient;
            },
            tension: 0.3, // ƒê·ªô cong c·ªßa ƒë∆∞·ªùng
            pointBackgroundColor: "rgb(139, 92, 246)", // M√†u ƒëi·ªÉm d·ªØ li·ªáu (m√†u t√≠m ƒë·∫≠m h∆°n)
            pointRadius: 4,
            pointHoverRadius: 6,
          },
        ],
      });
    } else {
      setBalanceChartData(null); // X√≥a d·ªØ li·ªáu bi·ªÉu ƒë·ªì n·∫øu kh√¥ng ph·∫£i tab "C√° nh√¢n" ho·∫∑c kh√¥ng c√≥ giao d·ªãch
    }
  }, [filteredTransactions, tab, selectedDate]);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="sticky top-0 bg-white shadow z-10 flex items-center justify-between px-4 py-3 border-b">
        <button onClick={() => navigate(-1)}>
          <ChevronLeft size={24} />
        </button>
        <div className="font-semibold text-lg">
          L·ªãch s·ª≠ -{" "}
          <span
            className="text-blue-600 cursor-pointer"
            onClick={handleExportCSV}
          >
            Xu·∫•t csv <Download size={16} className="inline" />
          </span>
        </div>
        <Search size={22} className="text-gray-500" />
      </div>

      {/* Thanh ch·ªçn ng√†y */}
      <div className="flex items-center overflow-x-auto px-2 py-2 gap-2 bg-white border-b no-scrollbar">
        <button
          onClick={() => setSelectedDate(subDays(selectedDate, 1))}
          className="p-1"
        >
          <ChevronLeft size={20} />
        </button>
        {days.map((day, idx) => (
          <div
            key={idx}
            onClick={() => setSelectedDate(day)}
            className={`px-3 py-1 rounded-full text-sm font-medium cursor-pointer min-w-[60px] text-center ${
              isSameDay(day, selectedDate)
                ? "bg-purple-200 text-purple-700"
                : "bg-gray-100 text-gray-600"
            }`}
          >
            {format(day, "EEE dd/MM", { locale: vi })}
          </div>
        ))}
        <button
          onClick={() => setSelectedDate(addDays(selectedDate, 1))}
          className="p-1"
        >
          <ChevronRight size={20} />
        </button>
      </div>

      {/* N·ªôi dung ch√≠nh */}
      <div className="px-3 py-4">
        {/* Tabs ch·ªçn lo·∫°i giao d·ªãch */}
        <TransactionHistoryHeader
          onTabChange={setTab}
          onTypeFilterChange={setTypeFilter}
          currentTab={tab}
          currentType={typeFilter}
        />

        {/* BI·ªÇU ƒê·ªí */}
        {tab === "C√° nh√¢n" &&
          balanceChartData && ( // Ch·ªâ hi·ªÉn th·ªã khi ·ªü tab c√° nh√¢n v√† c√≥ d·ªØ li·ªáu
            <div className="my-4 bg-white p-2 rounded-lg shadow">
              {" "}
              <BalanceLineChart chartData={balanceChartData} />
            </div>
          )}

        {/* Hi·ªÉn th·ªã giao d·ªãch */}
        <TransactionList
          transactions={filteredTransactions}
          loading={loading}
        />
      </div>
    </div>
  );
}
