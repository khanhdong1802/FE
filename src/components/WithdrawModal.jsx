import React, { useState, useEffect } from "react";
import { X } from "lucide-react";
import axios from "axios";

const WithdrawModal = ({ onClose, userId }) => {
  const [amount, setAmount] = useState("");
  const [source, setSource] = useState("");
  const [note, setNote] = useState("");
  const [balance, setBalance] = useState(0); // L∆∞u s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng

  // G·ªçi h√†m fetchBalance khi userId thay ƒë·ªïi
  useEffect(() => {
    const fetchBalance = async () => {
      try {
        if (!userId) {
          console.warn("‚ö†Ô∏è Kh√¥ng c√≥ userId ƒë∆∞·ª£c truy·ªÅn v√†o!");
          return;
        }

        const url = `http://localhost:3000/api/auth/balance/${userId}`;
        console.log("üì° G·ªçi API:", url);
        const res = await fetch(url);

        if (!res.ok) {
          const text = await res.text();
          console.error("‚ùå L·ªói khi g·ªçi API:", res.status, text);
          return;
        }

        const data = await res.json();
        console.log("üì¶ D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API:", data);
        setBalance(data?.balance || 0);
      } catch (err) {
        console.error("L·ªói khi l·∫•y s·ªë d∆∞:", err);
      }
    };

    fetchBalance();
  }, [userId]);

  const handleSubmit = async () => {
    if (!amount || !source) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }

    if (amount > balance) {
      alert("S·ªë ti·ªÅn r√∫t v∆∞·ª£t qu√° s·ªë d∆∞ hi·ªán t·∫°i");
      return;
    }

    try {
      await axios.post("http://localhost:3000/api/auth/Withdraw", {
        user_id: userId,
        amount,
        source,
        note,
      });

      // Sau khi r√∫t ti·ªÅn, g·ªçi l·∫°i fetchBalance ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i s·ªë d∆∞ m·ªõi
      setBalance(balance - Number(amount)); // C·∫≠p nh·∫≠t s·ªë d∆∞ sau khi r√∫t ti·ªÅn
      alert(`üí∏ R√∫t ${amount} ƒë t·ª´: ${source}\nGhi ch√∫: ${note}`);
      onClose(); // ƒê√≥ng modal sau khi th·ª±c hi·ªán xong
    } catch (error) {
      console.error("L·ªói khi r√∫t ti·ªÅn:", error);
      alert("L·ªói khi th·ª±c hi·ªán giao d·ªãch r√∫t ti·ªÅn.");
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-end justify-center z-50">
      <div className="bg-white w-full max-w-md rounded-2xl p-4 max-h-[90vh] overflow-y-auto shadow-lg">
        {/* Header */}
        <div className="flex justify-between items-center border-b pb-2 mb-4">
          <button onClick={onClose}>
            <X size={24} />
          </button>
          <h1 className="text-lg font-medium">R√∫t ti·ªÅn</h1>
          <button
            onClick={handleSubmit}
            className="text-purple-600 font-medium"
          >
            L∆∞u
          </button>
        </div>

        {/* Form r√∫t ti·ªÅn */}
        <div className="flex flex-col gap-4">
          {/* Hi·ªÉn th·ªã s·ªë d∆∞ hi·ªán t·∫°i */}
          <div className="text-sm text-gray-600">
            <strong>S·ªë d∆∞ hi·ªán t·∫°i:</strong> {balance} ƒë
          </div>

          <input
            type="number"
            placeholder="S·ªë ti·ªÅn"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className="w-full p-2 border rounded text-sm"
          />
          <input
            type="text"
            placeholder="L√Ω do r√∫t (VD: ƒÇn u·ªëng, mua ƒë·ªì...)"
            value={source}
            onChange={(e) => setSource(e.target.value)}
            className="w-full p-2 border rounded text-sm"
          />
          <textarea
            placeholder="Ghi ch√∫ (t√πy ch·ªçn)"
            value={note}
            onChange={(e) => setNote(e.target.value)}
            className="w-full p-2 border rounded text-sm"
            rows={3}
          />
        </div>
      </div>
    </div>
  );
};

export default WithdrawModal;
